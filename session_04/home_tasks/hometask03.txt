Думаю проще всего объяснить это на примере описания моей ситуации.

Есть "сервис". Он:
- запускает свой код
- запускает PostgreSQL (реляционная БД)
- запускает Redis (быстрая БД типа "ключ-значение")

При неправильных данных конфигурации (паролях, IP, портах, etc.) базы данных могут не запуститься, тогда нужно запустить альтернативные БД:
- упал PostgreSQL => забить тревогу
- упал Redis => поднять MemoryStorage (что-то типа словаря прямо в RAM)

Работа с сервисом осуществляется через консоль, и лучше узнавать о том, что какой-то модуль не работает, именно через логи в консоли. 

Использовать какие-то библиотеки для CLI/TLI не хотелось, да и задача была довольно простой, поэтому я написал собственный "логгер" состояния проекта, который выводился в консоли.

Реализуйте функцию, на вход которой подаются 3 параметра:
1. Список названий модулей (основной код, БД, etc.)
2. Символ-разделитель
3. Длина строки-разделителя (начиная от самого длинного названия из всех)
4. Список слов длины 2:
   0-ой индекс - слово, отвечающее за успешный запуск модуля
   1-ый индекс - слово, отвечающее за неуспешный запуск модуля
6. (эмуляция запуска сервисов) Список длины n, где i-ый элемент - булево значение:
   - если 0 - i-ый сервис в списке названий модулей (т.е. который был передан через параметр) не запустился
   - если 1 - i-ый сервис в списке названий модулей запустился
   Если сервис не запустился, вы должны прервать вывод в консоль и написать сообщение, что i-ый сервис не запустился, всё, конец, и завершить выполнение кода. Содержание сообщения - за вами, +креатив.

TESTS

TEST 1
terminal_viewer(("MAIN", "POSTGRES", "REDIS"), ".", 3, ("WORKS", "FAILED"), (1, 1, 1))
MAIN.......WORKS
POSTGRES...WORKS
REDIS......WORKS

TEST 2
terminal_viewer(("MAIN", "SQLITE"), "-", 8, ("STARTED", "DOWNED"), (1, 0))
MAIN----------STARTED
SQLITE--------DOWNED
SQLITE IS DOWN!

TEST 3
terminal_viewer(("TRAINING", "VALIDATION", "TESTING"), ".", 1, ("HOORAY", "FUCK"), (1, 0, 1))
TRAINING...HOORAY
VALIDATION.FUCK
VALIDATION FUCKED UP!

